{"name":"CSS3 Colorpicker","tagline":"Finally, a decent color picker","body":"# About\r\n\r\nAfter searching for several days for the perfect JavaScript color picker to use in an internal project (a web application that requires HTML5/CSS3), I stumbled upon [John Dyer](http://j.hn/)'s \"[PhotoShop-like JavaScript Color Picker](http://johndyer.name/post/PhotoShop-like-JavaScript-Color-Picker.aspx)\" from 2007. It was perfect. It had all the color modes I wanted, but it wasn't cluttered. Simple yet complete. And then I looked at the code.\r\n\r\nThough he \"refactored\" it in 2009, I was a bit put off by the use of tables to build the layout, and a bit disappointed that the whole thing wasn't self-contained in a smaller package. And that it wasn't based on JQuery (since it was neither well-known nor refined at the time). So, I decided to make my own version, making use of CSS3 gradients, since for my purposes, it would be used in a project that already requires using a browser that supports these latest features.\r\n\r\nI borrowed a lot of the code for converting between the different color modes as well as the Photoshop-like layout, but I built all the rest from scratch. Well, almost. I used the JQuery UI date picker as a boilerplate.\r\n\r\n***\r\n***\r\n\r\n### [Demo](http://htmlpreview.github.com/?https://github.com/gruppler/CSS3-Colorpicker/blob/master/index.html)\r\n\r\n***\r\n***\r\n\r\n# Documentation\r\nCurrent version: **v1.3.2**\r\n\r\nInclude these in your header:\r\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"colorpicker.css\"/>\r\n&lt;script type=\"text/javascript\" src=\"jquery.min.js\">&lt;/script>\r\n&lt;script type=\"text/javascript\" src=\"colorpicker.js\">&lt;/script></code></pre>\r\n\r\nApply to your selection:\r\n<pre><code>$('.color').colorpicker();\r\n$('#color1').colorpicker({\r\n    realtime: false,\r\n    invertControls: false,\r\n    controlStyle: 'raised'\r\n});</code></pre>\r\n\r\n***\r\n\r\n### Options:\r\n<pre><code>showAnim:       true        // [true|false] to enable/disable animations\r\nduration:       200         // Fade duration\r\ncolor:          'FFF'       // Default color\r\nallowNull:      false       // [true|false] to allow an empty color value;\r\n                            //   otherwise default to the default color\r\nrealtime:       true        // [true|false] to enable/disable instant updates\r\ninvertControls: true        // [true|false] to enable/disable inverting color\r\n                            //   of mouse controls based on luminance\r\ncontrolStyle:   'simple'    // Mouse control theme [simple|raised|inset];\r\n                            //   separate multiple themes with a space\r\nswatches:       true        // [true|false] to enable/disable,\r\n                            //   or an array of hex codes to pre-fill\r\nalpha:          false       // [true|false] to enable/disable alpha\r\nalphaHex:       false       // [true|false] to enable/disable 4-byte hex\r\n                            //   in the format '#AARRGGBB'</code></pre>\r\n\r\nOptions can be retrieved or changed at any time:\r\n<pre><code>// Get option's current value\r\n$(\".selector\").colorpicker(\"option\", \"color\");\r\n\r\n// Set option\r\n$(\".selector\").colorpicker(\"option\", \"color\", \"fff\");</code></pre>\r\n\r\n***\r\n\r\n### Events:\r\n<pre><code>beforeShow(input, inst)       // Fired before the color picker is shown\r\nonClose(color, inst)          // Fired when the color picker is hidden\r\nonSelect(color, inst)         // Fired when the color is set\r\nonAddSwatch(color, swatches)  // Fired when a new color swatch is added</code></pre>\r\n\r\nEvent handlers can be set just like options:\r\n<pre><code>// At initialization\r\n$(\".selector\").colorpicker({\r\n    onSelect: function(color, inst){...}\r\n});\r\n\r\n// After initialization\r\n$(\".selector\").colorpicker('option', 'onSelect', function(color, inst){...});</code></pre>\r\n\r\n***\r\n\r\n### Public methods:\r\n<pre><code>setDefaults(settings)  // Set the defaults for all color pickers\r\naddSwatch(color, newOnly) // Add a color or array of colors to the swatches;\r\n                       //   preserve sorting if 'newOnly' is true\r\nclearSwatches()        // Remove all swatches\r\nrefresh()              // Update the color picker\r\ncolor(args)            // A useful color class\r\nhexToRgb(hex, alphaOn) // Returns {r:[0-255], g:[0-255], b:[0-255], a:[0-100]}\r\nvalidateHex(hex, norm, alphaOn) // Returns a valid hex code,\r\n                       //   optionally normalized\r\nrgbToHex(rgb, alphaOn) // rgb = {r:[0-255], g:[0-255], b:[0-255], [a:[0-100]]}\r\nintToHex(dec)          // Base conversion from 10 to 16\r\nhextToInt(hex)         // Base conversion from 16 to 10\r\nrgbToLum(rgb)          // rgb = {r:[0-255], g:[0-255], b:[0-255]}\r\n                       //   Returns integer [0-100]\r\nrgbToHsv(rgb)          // rgb = {r:[0-255], g:[0-255], b:[0-255]}\r\n                       //   Returns {h:[0-359], s:[0-100], v:[0-100]}\r\nhsvToRgb(rgb)          // hsv = {h:[0-359], s:[0-100], v:[0-100]}\r\n                       //   Returns {r:[0-255], g:[0-255], b:[0-255]}</code></pre>\r\n\r\nTo use a public method, call it like this:\r\n<pre><code>// Validate 'hex'\r\n$.colorpicker.validateHex('hex');\r\n\r\n// Create a color object\r\nvar myColor = new $.colorpicker.color({hex: 'ccc'});</code></pre>\r\n\r\n***\r\n***\r\n\r\n# Legal stuff\r\n\r\n**CSS3 ColorPicker** (https://github.com/gruppler/CSS3-Colorpicker)<br/>\r\nCopyright &copy; 2011 Craig Laparo (https://plus.google.com/114746898337682206892)<br/>\r\nBased on \"PhotoShop-like JavaScript Color Picker\"<br/>\r\nCopyright &copy; 2007 John Dyer (http://johndyer.name)<br/>\r\nMIT style license<br/>\r\n\r\nPermission is hereby granted, free of charge, to any person\r\nobtaining a copy of this software and associated documentation\r\nfiles (the \"Software\"), to deal in the Software without\r\nrestriction, including without limitation the rights to use,\r\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the\r\nSoftware is furnished to do so, subject to the following\r\nconditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\r\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\r\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}